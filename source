/*
 * File: Breakout.java
 * -------------------
 * Name:
 * Section Leader:
 * 
 * This file will eventually implement the game of Breakout.
 */

import acm.graphics.*;
import acm.program.*;
import acm.util.*;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class Breakout extends GraphicsProgram {

/** Width and height of application window in pixels */
	public static final int APPLICATION_WIDTH = 500;
	public static final int APPLICATION_HEIGHT = 600;

/** Dimensions of game board (usually the same) */
	private static final int WIDTH = APPLICATION_WIDTH;
	private static final int HEIGHT = APPLICATION_HEIGHT;

/** Dimensions of the paddle */
	private static final int PADDLE_WIDTH = 60;
	private static final int PADDLE_HEIGHT = 10;

/** Offset of the paddle up from the bottom */
	private static final int PADDLE_Y_OFFSET = 30;

/** Number of bricks per row */
	private static final int NBRICKS_PER_ROW = 10;

/** Number of rows of bricks */
	private static final int NBRICK_ROWS = 10;

/** Separation between bricks */
	private static final int BRICK_SEP = 4;

/** Width of a brick */
	private static final int BRICK_WIDTH =
	  (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;

/** Height of a brick */
	private static final int BRICK_HEIGHT = 8;

/** Radius of the ball in pixels */
	private static final int BALL_RADIUS = 10;

/** Offset of the top brick row from the top */
	private static final int BRICK_Y_OFFSET = 70;

/** Number of turns */
	private static final int NTURNS = 3;
	
	
/* Method: run() */
/** Runs the Breakout program. */
	public void run() 
	{
		setupBricks();
		createPaddle();
		score = new GLabel ("Score : 00");
		score.setFont("Courier-24");
		add(score, 300, 24);
		note = new GLabel ("Game Starts! All the Best");
		note.setFont("Courier-18");
		add(note, 0, 24);
		play();	
	}
	
	public void setupBricks()
	{
		int x=0;
		int y= BRICK_Y_OFFSET;
		int x1= BRICK_SEP/2 ;
		for(int i=0; i< NBRICK_ROWS; i++)
		{
			y= BRICK_Y_OFFSET + i*(BRICK_HEIGHT + BRICK_SEP);
			for (int j=0; j<NBRICKS_PER_ROW; j++)
			{
				x = x1 + j*(BRICK_WIDTH + BRICK_SEP);
				GRect brick = new GRect(BRICK_WIDTH, BRICK_HEIGHT);
				brick.setFilled(true);
				add(brick, x,y);
				switch (i)
				{
				case (0) : brick.setFillColor(Color.RED);
				break;
				case (1) : brick.setFillColor(Color.RED);
				break;
				case (2) : brick.setFillColor(Color.ORANGE);
				break;
				case 3 : brick.setFillColor(Color.ORANGE);
				break;
				case 4 : brick.setFillColor(Color.YELLOW);
				break;
				case 5: brick.setFillColor(Color.YELLOW);
				break;
				case 6 : brick.setFillColor(Color.GREEN);
				break;
				case 7 : brick.setFillColor(Color.GREEN);
				break;
				case 8 : brick.setFillColor(Color.CYAN);
				break;
				case 9 :brick.setFillColor(Color.CYAN);
				break;
				default : break;
				}
				
				
			}
		}
	}
	public void createPaddle()
	{
		paddle = new GRect (PADDLE_WIDTH, PADDLE_HEIGHT);
		paddle.setFilled(true);
		add (paddle, (WIDTH - PADDLE_WIDTH)/2 , HEIGHT - PADDLE_Y_OFFSET);
		addMouseListeners();
	}
	public void mouseMoved(MouseEvent e )
	{
	paddle.move(e.getX() - paddle.getX(), 0);	
	}
	public void addBall()
	{
		ball = new GOval(BALL_RADIUS, BALL_RADIUS);
		ball.setFilled(true);
		add(ball, (WIDTH-BALL_RADIUS)/2, (HEIGHT-BALL_RADIUS)/2);
	}
	
	public void play()
	{
		
		for (int i = 0; i<NTURNS ; i++)
		{
			vx = rgen.nextDouble(1.0, 3.0);
			if (rgen.nextBoolean(0.5)) vx = -vx;
			addBall();
			while(turnNotOver())
			{
			
				ball.move(vx,vy);
				pause(DELAY);
				checkForCollision();
				score.setLabel("Score : " + brickCounter);
			
			}
			pause(10*DELAY);
		}
		if (brickCounter < NBRICK_ROWS * NBRICKS_PER_ROW)
		{
			removeAll();
			GLabel gameLost = new GLabel ("Game Lost");
			gameLost.setFont("Times New Roman -72");
			add(gameLost,50, HEIGHT/2 + 36 );
		}
		 
	}
	public boolean turnNotOver()
	{
		if (brickCounter == NBRICK_ROWS * NBRICKS_PER_ROW) {
			removeAll();
			GLabel gameWon = new GLabel ("Game Won");
			gameWon.setFont("Times New Roman -72");
			add(gameWon,50, HEIGHT/2 + 36 );
			pause(DELAY * 100);
			exit();
		}
		if ((brickCounter <= NBRICK_ROWS * NBRICKS_PER_ROW) && (ball.getY() < (HEIGHT - BALL_RADIUS*2)) ) return true;
		remove (ball);
		note.setLabel("No. of Turns Left : " + (NTURNS -  turnCounter) );
		turnCounter ++ ;
		return false;
	}
	
	public boolean didCollideHorizontal()
	{
		if ((ball.getY() > (HEIGHT - BALL_RADIUS*2)) || (ball.getY() < 1)) return true;
		return false;
		
	}
	
	public boolean didCollideVertical ()
	{
		if ((ball.getX() < 1) || (ball.getX() > (WIDTH - BALL_RADIUS*2)) ) return true;
		return false;
	}
	
	public void checkForCollision()
	{
		if (didCollideHorizontal()) 
			{
				bounceClip.play();
				vy = -vy;
			}
		if (didCollideVertical())
			{
				bounceClip.play();
				vx = -vx;
			}
		GObject collider = getCollidingObject();
		if (collider == paddle ) 
			{
				bounceClip.play();
				//double bx = ball.getX();
				//double px = paddle.getX();
			
			//	if( bx < px + PADDLE_WIDTH/2)
				//{
				//vx = -vx;
				//vy = -vy;
				//}
				vy = -vy;
				
			}
		else if (collider != null && collider != score && collider != note ) 
		{
			bounceClip.play();
			remove(collider);
			brickCounter ++;
			vy = -vy;
		}
		
	}
	
	public GObject getCollidingObject()
	{
		double x = ball.getX();
		double y = ball.getY();
		int diam = 2* BALL_RADIUS;
		GObject obj;
		obj = getElementAt(x,y);
		if (obj == null) 
		{
			obj = getElementAt (x + diam, y);
			if (obj == null) 
			{
				obj = getElementAt (x , y + diam);
				if (obj == null) 
				{
					obj = getElementAt (x + diam, y + diam);
				}
			}
		}
		
		
		return obj;
		
	
	}
	
	private static GRect paddle;

	private static GOval ball;
	
	private double vy = 3.0, vx;
	
	private RandomGenerator rgen = RandomGenerator.getInstance();
	
	private static final int DELAY = 6;
	 
	private static int brickCounter = 0;
	
	private static int turnCounter = 1;
	
	private static GLabel score;
	
	private static GLabel note;
	
	private static AudioClip bounceClip = MediaTools.loadAudioClip("bounce.au");
}
